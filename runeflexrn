#!/bin/bash

IFS=""
GAP=1
PADDING_X=1
PADDING_Y=1
MARGIN_X=0
MARGIN_Y=0
BORDER_CHAR=""
BORDER_CHAR_RUNEWIDTH=0
POSITIONAL_ARGS=()
ERR_CODE_INVALID_OPTION=3

readonly cf="\\033[0m"
readonly red="\\033[0;31m"

err() {
  local _date
  _date=$(showdate)
  echo -e "[$_date][${red}ERROR${cf}]: $1" 1>&2
}

showdate() {
  local _date
  _date=$(date +%d-%H.%M)
  echo "$_date"
}

is_exists() {
  which "$1" >/dev/null 2>&1
  return $?
}

is_number() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    return 0
  else
    return 1
  fi
}

err_exit() {
  err "$1"
  if [[ -z "$2" ]]; then
    exit 1
  else
    exit "$2"
  fi
}

exit_health() {
  if [[ -n "$1" ]]; then
    info "$1"
  fi
  exit 0
}

while [[ $# -gt 0 ]]; do
  case $1 in
    -p | --padding)
      if is_number "$2"; then
        PADDING_X="$2"
        PADDING_Y="$2"
      else
        err_exit "--padding option argument is expected the number" "$ERR_CODE_INVALID_OPTION"
      fi
      shift
      shift
      ;;
    -px | --padding-x)
      if is_number "$2"; then
        PADDING_X="$2"
      else
        err_exit "--padding-x option argument is expected the number" "$ERR_CODE_INVALID_OPTION"
      fi
      shift
      shift
      ;;
    -py | --padding-y)
      if is_number "$2"; then
        PADDING_Y="$2"
      else
        err_exit "--padding-y option argument is expected the number" "$ERR_CODE_INVALID_OPTION"
      fi
      shift
      shift
      ;;
    -m | --margin)
      if is_number "$2"; then
        MARGIN_X="$2"
        MARGIN_Y="$2"
      else
        err_exit "--margin option argument is expected the number" "$ERR_CODE_INVALID_OPTION"
      fi
      shift
      shift
      ;;
    -mx | --margin-x)
      if is_number "$2"; then
        MARGIN_X="$2"
      else
        err_exit "--margin-x option argument is expected the number" "$ERR_CODE_INVALID_OPTION"
      fi
      shift
      shift
      ;;
    -my | --margin-y)
      if is_number "$2"; then
        MARGIN_Y="$2"
      else
        err_exit "--margin-y option argument is expected the number" "$ERR_CODE_INVALID_OPTION"
      fi
      shift
      shift
      ;;
    -g | --gap)
      if is_number "$2"; then
        GAP="$2"
      else
        err_exit "--gap option argument is expected the number" "$ERR_CODE_INVALID_OPTION"
      fi
      shift
      shift
      ;;
    -b | --border)
      if [[ -$(runewidth "$2") -lt 3 ]]; then
        BORDER_CHAR="$2"
      else
        err_exit "--border option argument is expected the number" "$ERR_CODE_INVALID_OPTION"
      fi
      shift
      shift
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done

# restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

# fix box char runewidth
BORDER_CHAR_RUNEWIDTH="$(runewidth "$BORDER_CHAR")"

run_runeflexrn() {
  in=$(cat -)
  files=()
  file_count=0
  line_count=0

  while read -r line; do
    if [[ "$line" =~ ^$ ]]; then
      ((file_count++))
      line_count=0
    else
      if [[ $line_count -eq 0 ]]; then
        files["$file_count"]="${files["$file_count"]}""$(printf "%s" "$line")"
      else
        files["$file_count"]="${files["$file_count"]}""$(printf "\n%s" "$line")"
      fi
      ((line_count++))
    fi
  done <<<"$in"

  nfiles=()
  count=0
  line=""
  for f in "${files[@]}"; do
    line_count=0
    tmp=$(mktemp)
    echo "$f" >"$tmp"
    nfiles[$count]="$tmp"
    ((count++))
  done

  if [[ "$BORDER_CHAR_RUNEWIDTH" -eq 0 ]]; then
    runeflex -g "$GAP" -px "$PADDING_X" -py "$PADDING_Y" "${nfiles[@]}"
  else
    runeflex -b "$BORDER_CHAR" -px "$PADDING_X" -py "$PADDING_Y" -mx "$MARGIN_X" -my "$MARGIN_Y" "${nfiles[@]}"
  fi
}

# validation
if [[ -z "$BORDER_CHAR_RUNEWIDTH" || "$BORDER_CHAR_RUNEWIDTH" -gt 2 ]]; then
  err_exit "String is over 2 runewidth" "$ERR_CODE_INVALID_BORDER_CHAR_WIDTH"
elif ! is_exists "runewidth"; then
  err_exit "Command not found: runewidth" "$ERR_CODE_NOT_FOUND_RUNEWIDTH"
else
  run_runeflexrn
fi
